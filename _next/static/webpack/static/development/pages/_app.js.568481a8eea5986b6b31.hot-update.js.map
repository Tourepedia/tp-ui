{"version":3,"file":"static/webpack/static/development/pages/_app.js.568481a8eea5986b6b31.hot-update.js","sources":["webpack:///./components/CodeBlock.jsx","webpack:///./components/HtmlLive.jsx","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/readOnlyError.js"],"sourcesContent":["import React from \"react\"\nimport * as ReactLive from \"react-live\"\nimport Highlight, { defaultProps } from \"prism-react-renderer\"\nimport editorTheme from \"prism-react-renderer/themes/dracula\"\nimport { github as theme } from \"./themes\"\nimport * as UI from \"@tourepedia/ui\"\nimport * as HtmlLive from \"./HtmlLive\"\n\nimport \"./code-block.css\"\n\nexport default function CodeBlock({\n  live,\n  noInline,\n  className,\n  children,\n  language,\n}) {\n  language = language || className.replace(/language-/, \"\")\n  if (live) {\n    const Live = ReactLive\n    if (language === \"html\") {\n      Live = HtmlLive\n    }\n    return (\n      <div className=\"react-live\">\n        <Live.LiveProvider\n          code={children}\n          language={language}\n          noInline={noInline}\n          theme={editorTheme}\n          scope={{\n            ...React,\n            ...UI,\n          }}\n        >\n          <Live.LiveEditor className=\"editor\" tabIndex=\"-1\" />\n          <Live.LiveError className=\"error\" />\n          <Live.LivePreview className=\"preview\" />\n        </Live.LiveProvider>\n      </div>\n    )\n  }\n  return (\n    <Highlight\n      {...defaultProps}\n      theme={theme}\n      code={children}\n      language={language}\n    >\n      {({ className, style, tokens, getLineProps, getTokenProps }) => (\n        <pre className={className + \" only-preview\"} style={{ ...style }}>\n          {tokens.map((line, i) => (\n            <div key={i} {...getLineProps({ line, key: i })}>\n              {line.map((token, key) => (\n                <span key={key} {...getTokenProps({ token, key })} />\n              ))}\n            </div>\n          ))}\n        </pre>\n      )}\n    </Highlight>\n  )\n}\n","import React, { useState } from \"react\"\nimport Highlight, { defaultProps } from \"prism-react-renderer\"\nimport { Editor } from \"react-live\"\nimport { github } from \"./themes\"\n\nconst Code = React.createContext({})\n\nexport function LiveProvider({ children, theme = github, language = \"html\" }) {\n  const [code, changeCode] = useState(\"\")\n  const [error, handleError] = useState(\"\")\n  return (\n    <Code.Provider\n      value={{\n        error,\n        code,\n        onChange: changeCode,\n        onError: handleError,\n        theme,\n        language,\n      }}\n    >\n      {children}\n    </Code.Provider>\n  )\n}\n\nexport function LiveEditor() {\n  return (\n    <Code.Consumer>\n      {({ code, language, theme, disabled, onChange }) => (\n        <Editor\n          theme={theme}\n          code={code}\n          language={language}\n          disabled={disabled}\n          onChange={onChange}\n          {...props}\n        />\n      )}\n    </Code.Consumer>\n  )\n}\n\nexport function LivePreview(props) {\n  return (\n    <Code.Consumer>\n      {({ onChange, ...context }) => (\n        <Highlight {...defaultProps} {...context} {...props}>\n          {({ className, style, tokens, getLineProps, getTokenProps }) => (\n            <pre className={className + \" only-preview\"} style={{ ...style }}>\n              {tokens.map((line, i) => (\n                <div key={i} {...getLineProps({ line, key: i })}>\n                  {line.map((token, key) => (\n                    <span key={key} {...getTokenProps({ token, key })} />\n                  ))}\n                </div>\n              ))}\n            </pre>\n          )}\n        </Highlight>\n      )}\n    </Code.Consumer>\n  )\n}\n\nexport function LiveError(props) {\n  return (\n    <Code.Consumer>\n      {({ error }) => (error ? <pre {...props}>{error}</pre> : null)}\n    </Code.Consumer>\n  )\n}\n","export default function _readOnlyError(name) {\n  throw new Error(\"\\\"\" + name + \"\\\" is read-only\");\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAGA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAFA;AAaA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAFA;AAFA;AAiBA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;;;;;;;;;ACvEA;AAAA;AAAA;AACA;AACA;;;;A","sourceRoot":""}