{"version":3,"file":"static/webpack/static/development/pages/components/button.js.df39f68d7fa38737c09a.hot-update.js","sources":["webpack:///./pages/components/button.mdx"],"sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport Layout from \"../../components/ComponentsLayout\"\nexport const meta = {\n    title: \"Button\",\n    description: \"Button is just a wrapper around the native button element to privide convinient for styling.\",\n    name: \"@tourepedia/button\",\n    usage: `import Button from '@tourepedia/button'\nfunction App () {\n  return <Button>Submit</Button>\n}`\n};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  meta\n};\nconst MDXLayout = Layout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h2>{`Hierarchy and Semantics/Colors`}</h2>\n    <p>{`Button component has two main type of props that changes the visual representation: Hierarchy(Order) and Semantics (Colors). We can use a combination of these two type of attributes of our purpose.`}</p>\n    <h3>{`Hierarchy`}</h3>\n    <p>{`We have three levels for hierarchy: `}<inlineCode parentName=\"p\">{`primary`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`secondary`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`tertiary`}</inlineCode>{`. Hierarchy decides which button should be more prominent. You can pass one of these as booleans.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`<Button primary type=\"button\">Click Me!</Button>\n`}</code></pre>\n    <h3>{`Semantics/Colors`}</h3>\n    <p>{`Semantics add the state/meaning of the type of the action a button represents. We have following semantics/colors\nmodifiers that can be used to change the apperance:\n`}<inlineCode parentName=\"p\">{`branded`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`success`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`danger`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`warning`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`accent`}</inlineCode>{`. Any of these can be passed as a boolean props to apply styles\nfor it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`<Button branded>Click Me!</Button>\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`All type=\"submit\" buttons are default to `}<inlineCode parentName=\"p\">{`primary and branded`}</inlineCode>{` states which can be overwritten.`}</p>\n    </blockquote>\n    <h2>{`Playground`}</h2>\n    <p>{`Play will all the props here.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live=true\",\n        \"live\": \"true\"\n      }}>{`<Button warning primary>Click Me!</Button>\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n  "],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AACA;AAIA;AACA;AADA;AAGA;AACA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;;;;A","sourceRoot":""}